{"ast":null,"code":"var _jsxFileName = \"/home/trevor/projects/pos-frontend/src/components/menu/Modify.js\",\n    _s = $RefreshSig$();\n\nimport { menuState } from '../state/Atoms';\nimport { useRecoilState } from 'recoil';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Modify(_ref) {\n  _s();\n\n  let {\n    categories,\n    db\n  } = _ref;\n  const [menu, setMenuState] = useRecoilState(menuState);\n  const optionsArray = [];\n\n  for (const item of db) {\n    if (item.menu === 'modify') {\n      for (const addon of item.addons) {\n        if (addon.category === menu.currentCategory) {\n          optionsArray.push(addon);\n        }\n      }\n    }\n  }\n\n  const checkRequired = item => {\n    const currentItems = [];\n\n    for (const current of menu.pending.modify) {\n      currentItems.push(current.category);\n    }\n\n    console.log(currentItems);\n\n    for (const option of menu.selection.options) {\n      if (option.num) {\n        console.log(option.num);\n        const num = currentItems.filter(x => x === option.category).length;\n\n        if (num <= option.num) {\n          addItem(item);\n        }\n      }\n    }\n  };\n\n  const addItem = item => {\n    setMenuState({ ...menu,\n      pending: { ...menu.pending,\n        modify: [...menu.pending.modify, item]\n      }\n    });\n  };\n\n  return optionsArray.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => checkRequired(item),\n    className: \"menu_item\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menuItemText\",\n      children: item.food\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 16\n    }, this)\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 11\n  }, this));\n}\n\n_s(Modify, \"2D0T/8me5HEOOx8SkvJL235x9iQ=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = Modify;\nexport default Modify;\n\nvar _c;\n\n$RefreshReg$(_c, \"Modify\");","map":{"version":3,"sources":["/home/trevor/projects/pos-frontend/src/components/menu/Modify.js"],"names":["menuState","useRecoilState","Modify","categories","db","menu","setMenuState","optionsArray","item","addon","addons","category","currentCategory","push","checkRequired","currentItems","current","pending","modify","console","log","option","selection","options","num","filter","x","length","addItem","map","i","food"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,QAA/B;;;AAEA,SAASC,MAAT,OAAoC;AAAA;;AAAA,MAApB;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAoB;AAC/B,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBL,cAAc,CAACD,SAAD,CAA3C;AACA,QAAMO,YAAY,GAAG,EAArB;;AAEA,OAAK,MAAMC,IAAX,IAAmBJ,EAAnB,EAAuB;AAClB,QAAII,IAAI,CAACH,IAAL,KAAc,QAAlB,EAA4B;AACvB,WAAK,MAAMI,KAAX,IAAoBD,IAAI,CAACE,MAAzB,EAAiC;AAC5B,YAAID,KAAK,CAACE,QAAN,KAAmBN,IAAI,CAACO,eAA5B,EAA6C;AACxCL,UAAAA,YAAY,CAACM,IAAb,CAAkBJ,KAAlB;AACJ;AACL;AACL;AACL;;AAED,QAAMK,aAAa,GAAIN,IAAD,IAAU;AAC3B,UAAMO,YAAY,GAAG,EAArB;;AACA,SAAK,MAAMC,OAAX,IAAsBX,IAAI,CAACY,OAAL,CAAaC,MAAnC,EAA2C;AACtCH,MAAAA,YAAY,CAACF,IAAb,CAAkBG,OAAO,CAACL,QAA1B;AACJ;;AACDQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;;AACA,SAAK,MAAMM,MAAX,IAAqBhB,IAAI,CAACiB,SAAL,CAAeC,OAApC,EAA6C;AACxC,UAAIF,MAAM,CAACG,GAAX,EAAgB;AACXL,QAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACG,GAAnB;AACA,cAAMA,GAAG,GAAGT,YAAY,CAACU,MAAb,CACNC,CAAD,IAAOA,CAAC,KAAKL,MAAM,CAACV,QADb,EAEVgB,MAFF;;AAGA,YAAIH,GAAG,IAAIH,MAAM,CAACG,GAAlB,EAAuB;AAClBI,UAAAA,OAAO,CAACpB,IAAD,CAAP;AACJ;AACL;AACL;AACL,GAjBD;;AAmBA,QAAMoB,OAAO,GAAIpB,IAAD,IAAU;AACrBF,IAAAA,YAAY,CAAC,EACR,GAAGD,IADK;AAERY,MAAAA,OAAO,EAAE,EACJ,GAAGZ,IAAI,CAACY,OADJ;AAEJC,QAAAA,MAAM,EAAE,CAAC,GAAGb,IAAI,CAACY,OAAL,CAAaC,MAAjB,EAAyBV,IAAzB;AAFJ;AAFD,KAAD,CAAZ;AAOJ,GARD;;AAUA,SAAOD,YAAY,CAACsB,GAAb,CAAiB,CAACrB,IAAD,EAAOsB,CAAP,kBACnB;AACK,IAAA,OAAO,EAAE,MAAMhB,aAAa,CAACN,IAAD,CADjC;AAGK,IAAA,SAAS,EAAC,WAHf;AAAA,2BAKK;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBAA+BA,IAAI,CAACuB;AAApC;AAAA;AAAA;AAAA;AAAA;AALL,KAEUD,CAFV;AAAA;AAAA;AAAA;AAAA,UADE,CAAP;AASJ;;GApDQ5B,M;UACyBD,c;;;KADzBC,M;AAsDT,eAAeA,MAAf","sourcesContent":["import { menuState } from '../state/Atoms';\nimport { useRecoilState } from 'recoil';\n\nfunction Modify({ categories, db }) {\n     const [menu, setMenuState] = useRecoilState(menuState);\n     const optionsArray = [];\n\n     for (const item of db) {\n          if (item.menu === 'modify') {\n               for (const addon of item.addons) {\n                    if (addon.category === menu.currentCategory) {\n                         optionsArray.push(addon);\n                    }\n               }\n          }\n     }\n\n     const checkRequired = (item) => {\n          const currentItems = [];\n          for (const current of menu.pending.modify) {\n               currentItems.push(current.category);\n          }\n          console.log(currentItems);\n          for (const option of menu.selection.options) {\n               if (option.num) {\n                    console.log(option.num);\n                    const num = currentItems.filter(\n                         (x) => x === option.category\n                    ).length;\n                    if (num <= option.num) {\n                         addItem(item);\n                    }\n               }\n          }\n     };\n\n     const addItem = (item) => {\n          setMenuState({\n               ...menu,\n               pending: {\n                    ...menu.pending,\n                    modify: [...menu.pending.modify, item],\n               },\n          });\n     };\n\n     return optionsArray.map((item, i) => (\n          <div\n               onClick={() => checkRequired(item)}\n               key={i}\n               className='menu_item'\n          >\n               <div className='menuItemText'>{item.food}</div>\n          </div>\n     ));\n}\n\nexport default Modify;\n"]},"metadata":{},"sourceType":"module"}
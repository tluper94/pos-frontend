{"ast":null,"code":"var _jsxFileName = \"/home/tluper94/Projects/posfrontend/src/components/menu/Menu.js\",\n    _s = $RefreshSig$();\n\nimport '../../CSS/Menu.css';\nimport MenuItem from './MenuItem';\nimport MenuCategories from './MenuCategories';\nimport Modify from './Modify';\nimport { menuState } from '../state/Atoms';\nimport { useRecoilState } from 'recoil';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Menu(props) {\n  _s();\n\n  const database = props.database;\n  const [menu, setMenuState] = useRecoilState(menuState);\n  const isSelected = menu.isSelected;\n  const currentCategory = menu.currentCategory;\n  let categoryArray = [];\n  let menuArray = [];\n  let options = [];\n  console.log(menu); // Loops through menu array\n\n  for (const item of database) {\n    console.log(!item.options); //pushes menu category to categoryArray\n\n    if (item.food && !isSelected) {\n      categoryArray.push({\n        category: item.category,\n        color: item.color\n      });\n    } else if (item.options > 0 && isSelected) {\n      for (const option of item.options) {\n        categoryArray.push({\n          category: option.category,\n          color: 'blue'\n        });\n      }\n\n      options = item;\n    } //Pushes menu items that are in currentCategory to menuArray\n\n\n    if (item.category === currentCategory) {\n      menuArray.push(item);\n    }\n  }\n\n  categoryArray = [...new Map(categoryArray.map(item => [item.category, item])).values()];\n\n  function displayMenu() {\n    if (!isSelected) {\n      return menuArray.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n        item: item\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this));\n    } else {\n      return /*#__PURE__*/_jsxDEV(Modify, {\n        options: options,\n        db: database,\n        categories: categoryArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu_list\",\n      children: displayMenu()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(MenuCategories, {\n      categoryArry: categoryArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 11\n  }, this);\n}\n\n_s(Menu, \"2D0T/8me5HEOOx8SkvJL235x9iQ=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = Menu;\nexport default Menu;\n\nvar _c;\n\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"sources":["/home/tluper94/Projects/posfrontend/src/components/menu/Menu.js"],"names":["MenuItem","MenuCategories","Modify","menuState","useRecoilState","Menu","props","database","menu","setMenuState","isSelected","currentCategory","categoryArray","menuArray","options","console","log","item","food","push","category","color","option","Map","map","values","displayMenu","id"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,QAA/B;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAChB,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAvB;AACA,QAAM,CAACC,IAAD,EAAOC,YAAP,IAAuBL,cAAc,CAACD,SAAD,CAA3C;AACA,QAAMO,UAAU,GAAGF,IAAI,CAACE,UAAxB;AACA,QAAMC,eAAe,GAAGH,IAAI,CAACG,eAA7B;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAG,EAAd;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ,EATgB,CAWhB;;AACA,OAAK,MAAMS,IAAX,IAAmBV,QAAnB,EAA6B;AACxBQ,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACC,IAAI,CAACH,OAAlB,EADwB,CAExB;;AACA,QAAIG,IAAI,CAACC,IAAL,IAAa,CAACR,UAAlB,EAA8B;AACzBE,MAAAA,aAAa,CAACO,IAAd,CAAmB;AACdC,QAAAA,QAAQ,EAAEH,IAAI,CAACG,QADD;AAEdC,QAAAA,KAAK,EAAEJ,IAAI,CAACI;AAFE,OAAnB;AAIJ,KALD,MAKO,IAAIJ,IAAI,CAACH,OAAL,GAAe,CAAf,IAAoBJ,UAAxB,EAAoC;AACtC,WAAK,MAAMY,MAAX,IAAqBL,IAAI,CAACH,OAA1B,EAAmC;AAC9BF,QAAAA,aAAa,CAACO,IAAd,CAAmB;AACdC,UAAAA,QAAQ,EAAEE,MAAM,CAACF,QADH;AAEdC,UAAAA,KAAK,EAAE;AAFO,SAAnB;AAIJ;;AACDP,MAAAA,OAAO,GAAGG,IAAV;AACJ,KAhBuB,CAiBxB;;;AACA,QAAIA,IAAI,CAACG,QAAL,KAAkBT,eAAtB,EAAuC;AAClCE,MAAAA,SAAS,CAACM,IAAV,CAAeF,IAAf;AACJ;AACL;;AAEDL,EAAAA,aAAa,GAAG,CACX,GAAG,IAAIW,GAAJ,CACEX,aAAa,CAACY,GAAd,CAAmBP,IAAD,IAAU,CAACA,IAAI,CAACG,QAAN,EAAgBH,IAAhB,CAA5B,CADF,EAEDQ,MAFC,EADQ,CAAhB;;AAMA,WAASC,WAAT,GAAuB;AAClB,QAAI,CAAChB,UAAL,EAAiB;AACZ,aAAOG,SAAS,CAACW,GAAV,CAAeP,IAAD,iBAChB,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEA;AAAhB,SAA2BA,IAAI,CAACU,EAAhC;AAAA;AAAA;AAAA;AAAA,cADE,CAAP;AAGJ,KAJD,MAIO;AACF,0BACK,QAAC,MAAD;AACK,QAAA,OAAO,EAAEb,OADd;AAEK,QAAA,EAAE,EAAEP,QAFT;AAGK,QAAA,UAAU,EAAEK;AAHjB;AAAA;AAAA;AAAA;AAAA,cADL;AAOJ;AACL;;AAED,sBACK;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACK;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAA4Bc,WAAW;AAAvC;AAAA;AAAA;AAAA;AAAA,YADL,eAEM,QAAC,cAAD;AAAgB,MAAA,YAAY,EAAEd;AAA9B;AAAA;AAAA;AAAA;AAAA,YAFN;AAAA;AAAA;AAAA;AAAA;AAAA,UADL;AAMJ;;GA/DQP,I;UAEyBD,c;;;KAFzBC,I;AAiET,eAAeA,IAAf","sourcesContent":["import '../../CSS/Menu.css';\nimport MenuItem from './MenuItem';\nimport MenuCategories from './MenuCategories';\nimport Modify from './Modify';\nimport { menuState } from '../state/Atoms';\nimport { useRecoilState } from 'recoil';\n\nfunction Menu(props) {\n     const database = props.database;\n     const [menu, setMenuState] = useRecoilState(menuState);\n     const isSelected = menu.isSelected;\n     const currentCategory = menu.currentCategory;\n     let categoryArray = [];\n     let menuArray = [];\n     let options = [];\n\n     console.log(menu);\n\n     // Loops through menu array\n     for (const item of database) {\n          console.log(!item.options);\n          //pushes menu category to categoryArray\n          if (item.food && !isSelected) {\n               categoryArray.push({\n                    category: item.category,\n                    color: item.color,\n               });\n          } else if (item.options > 0 && isSelected) {\n               for (const option of item.options) {\n                    categoryArray.push({\n                         category: option.category,\n                         color: 'blue',\n                    });\n               }\n               options = item;\n          }\n          //Pushes menu items that are in currentCategory to menuArray\n          if (item.category === currentCategory) {\n               menuArray.push(item);\n          }\n     }\n\n     categoryArray = [\n          ...new Map(\n               categoryArray.map((item) => [item.category, item])\n          ).values(),\n     ];\n\n     function displayMenu() {\n          if (!isSelected) {\n               return menuArray.map((item) => (\n                    <MenuItem item={item} key={item.id}></MenuItem>\n               ));\n          } else {\n               return (\n                    <Modify\n                         options={options}\n                         db={database}\n                         categories={categoryArray}\n                    ></Modify>\n               );\n          }\n     }\n\n     return (\n          <div className='menu'>\n               <div className='menu_list'>{displayMenu()}</div>\n               {<MenuCategories categoryArry={categoryArray}></MenuCategories>}\n          </div>\n     );\n}\n\nexport default Menu;\n"]},"metadata":{},"sourceType":"module"}